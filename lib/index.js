// Generated by CoffeeScript 1.6.2
(function() {
  var JadeModuleCompiler, jade, modulize, sysPath;

  jade = require('jade');

  sysPath = require('path');

  modulize = (function() {
    var getBuf, isFunc, key, mdl, val, wrap, _ref, _results;

    isFunc = function(obj) {
      return obj && (obj.call != null) && (obj.apply != null);
    };
    getBuf = null;
    mdl = {
      exports: {}
    };
    (function(module, exports) {
      return __JADE_FUNCTION_HERE__();
    })(mdl, mdl.exports);
    if (!isFunc(getBuf)) {
      throw new Error("something wrong!!!");
    }
    getBuf().length = 0;
    wrap = function(func) {
      return function() {
        var buf, bufIdx;

        buf = getBuf();
        bufIdx = buf.length;
        func.apply(this, arguments);
        return buf.splice(bufIdx, buf.length - bufIdx).join('');
      };
    };
    _ref = mdl.exports;
    _results = [];
    for (key in _ref) {
      val = _ref[key];
      _results.push(module.exports[key] = isFunc(val) ? wrap(val) : val);
    }
    return _results;
  }).toString();

  module.exports = JadeModuleCompiler = (function() {
    JadeModuleCompiler.prototype.brunchPlugin = true;

    JadeModuleCompiler.prototype.type = 'template';

    JadeModuleCompiler.prototype.extension = 'jdlb';

    function JadeModuleCompiler(config) {
      this.config = config;
      null;
    }

    JadeModuleCompiler.prototype.compile = function(data, path, callback) {
      var err, error, jadeFunc, result, _ref, _ref1;

      try {
        data = "- getBuf = function(){return buf;};\n" + data;
        jadeFunc = jade.compile(data, {
          compileDebug: false,
          client: true,
          filename: path,
          pretty: !!((_ref = this.config.plugins) != null ? (_ref1 = _ref.jade) != null ? _ref1.pretty : void 0 : void 0)
        });
        return result = "(" + modulize.replace("__JADE_FUNCTION_HERE__", "(" + jadeFunc + ")") + ")();";
      } catch (_error) {
        err = _error;
        return error = err;
      } finally {
        callback(error, result);
      }
    };

    JadeModuleCompiler.prototype.include = [sysPath.join(__dirname, '..', 'node_modules', 'jade', 'runtime.js')];

    return JadeModuleCompiler;

  })();

}).call(this);
